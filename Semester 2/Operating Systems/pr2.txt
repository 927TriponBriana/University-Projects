Write a c program that recives as command line arguments as many files 
containig random text. For each such file the program will create a thread. 
Each thread will recive as argument a file. All threads will have access to
2 global variables. Each thread will count the letter and the digits from 
the file it recived as argument and will add each of these 2 values to the 
global variables mentioned earlier. The threads must be dynamically 
allocated in memory. The access to the global variables must be efficiently
synchronized using mutex variables (putting a mutex_lock at the begnnig of 
the thread and mutex_unlock at the end of the thread IS NOT EFFICIENT
SYNCHRONIZATION) NOTE: When you compile use the -pthread obtion. 
The source file must be compiled using gcc with -Wall -g options WITHOUT
WARNINGS OR SYNTAX ERRORS!!! Memory leaks and zombie processes are not 
allowed.


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t mc,ml;
int nr_cifre,nr_litere;

typedef struct{
char* nume_fisier;
}structura;


void *f(void *f_thread)
{
	char ch;
	structura a=*(structura*)f_thread;
	FILE* fisier=fopen(a.nume_fisier,"r");
	while(fscanf(fisier,"%c",&ch)!=EOF)
	{
		if(ch>='0' && ch<='9') 
		{
			pthread_mutex_lock(&mc);
			nr_cifre++;
			pthread_mutex_unlock(&mc);
		}
		else if((ch>='a' && ch<='z') || (ch>='A' && ch<='Z'))
		{
			pthread_mutex_lock(&ml);
			nr_litere++;
			pthread_mutex_unlock(&ml);
		}
	}
	fclose(fisier);
	free(f_thread);   //!!
	return NULL;	
}


int main(int argc,char* argv[])
{
	int i;
	pthread_t *t=malloc((argc-1)*sizeof(pthread_t));
	pthread_mutex_init(&mc,NULL);
	pthread_mutex_init(&ml,NULL);
	for(i=0; i<argc-1; i++)
	{
		structura *a=malloc(sizeof(structura));
		a->nume_fisier=argv[i+1];
		pthread_create(&t[i],NULL,f,(void*)a);
	}
	for(i=0; i<argc-1; i++)
	pthread_join(t[i],NULL);
	pthread_mutex_destroy(&mc);
	pthread_mutex_destroy(&ml);
	free(t);
	printf("Caractere: %d   Cifre:%d\n",nr_litere,nr_cifre);
	return 0;
}
